let g={isOpenCVReady:!1,isInitialized:!1,isProcessing:!1,totalProcessed:0,averageProcessingTime:0,lastError:null};function x(n,s,t){const e={taskId:n,type:"STATUS",message:t||`Estado: ${s}`};self.postMessage(e)}function U(n,s){const t={taskId:n,type:"SUCCESS",data:s};self.postMessage(t)}function A(n,s){const t={taskId:n,type:"ERROR",error:s};self.postMessage(t)}async function X(){return new Promise(n=>{if(typeof self<"u"&&self.cv&&self.cv.Mat){g.isOpenCVReady=!0,n(!0);return}const s=["https://docs.opencv.org/4.8.0/opencv.js","https://cdn.jsdelivr.net/npm/opencv.js@4.8.0/opencv.js","https://unpkg.com/opencv.js@4.8.0/opencv.js"],t=e=>{if(e>=s.length){console.warn("⚠️ OpenCV no disponible, usando algoritmos nativos avanzados"),g.isOpenCVReady=!1,n(!1);return}try{importScripts(s[e]);const c=()=>{typeof self<"u"&&self.cv&&self.cv.Mat?(g.isOpenCVReady=!0,console.log("✅ OpenCV cargado - algoritmos avanzados habilitados"),n(!0)):setTimeout(c,100)};setTimeout(c,100)}catch{console.warn(`Falló fuente ${e}, probando siguiente...`),t(e+1)}};t(0)})}async function _(n,s,t){const e=performance.now();try{if(x(t,"processing","Iniciando detección de objetos..."),g.isOpenCVReady&&cv){const c=await F(n,s,t),o=performance.now()-e;return{taskId:t,objects:c,processingTime:o,algorithm:"opencv",isOpenCVReady:!0}}else{const c=await Y(n,s,t),o=performance.now()-e;return{taskId:t,objects:c,processingTime:o,algorithm:"native",isOpenCVReady:!1}}}catch(c){throw performance.now()-e,new Error(`Error en detección: ${c instanceof Error?c.message:"Error desconocido"}`)}}async function F(n,s,t){x(t,"processing","Aplicando algoritmos OpenCV avanzados...");try{const e=cv.matFromImageData(n),c=new cv.Mat;cv.cvtColor(e,c,cv.COLOR_RGBA2GRAY);const o=new cv.Mat;cv.bilateralFilter(c,o,15,80,80);const a=new cv.CLAHE(3,new cv.Size(8,8)),f=new cv.Mat;a.apply(o,f);const y=new cv.Mat;cv.Canny(f,y,50,150,3,!1);const p=cv.getStructuringElement(cv.MORPH_ELLIPSE,new cv.Size(3,3)),u=new cv.Mat;cv.morphologyEx(y,u,cv.MORPH_CLOSE,p);const r=new cv.MatVector,m=new cv.Mat;cv.findContours(u,r,m,cv.RETR_EXTERNAL,cv.CHAIN_APPROX_SIMPLE);const l=[];for(let d=0;d<r.size();d++){const i=r.get(d),h=cv.boundingRect(i),v=cv.contourArea(i);if(v<s)continue;const w=cv.arcLength(i,!0),C=cv.moments(i),S=C.m10/C.m00,P=C.m01/C.m00,R=new cv.Mat;cv.convexHull(i,R,!1,!0);const O=cv.contourArea(R),E=O>0?v/O:0,M=v/(h.width*h.height),b=h.width/h.height,V=4*Math.PI*v/(w*w),j=w*w/v,z=cv.HuMoments(C),k=[];for(let T=0;T<z.rows;T++)k.push(z.data32F[T]);const I=cv.minEnclosingCircle(i).radius,$=cv.isContourConvex(i),H=L({area:v,solidity:E,circularity:V,extent:M,aspectRatio:b,compactness:j,perimeter:w});l.push({x:h.x,y:h.y,width:h.width,height:h.height,area:v,confidence:H,circularity:V,solidity:E,extent:M,aspectRatio:b,compactness:j,perimeter:w,contourPoints:i.rows,centerX:S,centerY:P,huMoments:k,isConvex:$,boundingCircleRadius:I})}return e.delete(),c.delete(),o.delete(),f.delete(),y.delete(),p.delete(),u.delete(),r.delete(),m.delete(),l}catch(e){throw new Error(`Error en detección OpenCV: ${e instanceof Error?e.message:"Error desconocido"}`)}}async function Y(n,s,t){x(t,"processing","Aplicando algoritmos nativos avanzados...");try{const e=n.width,c=n.height,o=n.data,a=new Uint8ClampedArray(e*c);for(let r=0;r<o.length;r+=4){const m=o[r]*.299+o[r+1]*.587+o[r+2]*.114;a[r/4]=m}const f=new Uint8ClampedArray(e*c);for(let r=1;r<c-1;r++)for(let m=1;m<e-1;m++){const l=r*e+m,d=-a[l-e-1]+a[l-e+1]+-2*a[l-1]+2*a[l+1]+-a[l+e-1]+a[l+e+1],i=-a[l-e-1]-2*a[l-e]-a[l-e+1]+a[l+e-1]+2*a[l+e]+a[l+e+1],h=Math.sqrt(d*d+i*i);f[l]=h>50?255:0}const y=new Uint16Array(e*c),p=[];let u=1;for(let r=0;r<c;r++)for(let m=0;m<e;m++){const l=r*e+m;if(f[l]===255&&y[l]===0){const d=N(f,y,m,r,e,c,u);if(d.area<s)continue;const i=W(d.points),h=B(d.points),v=d.points.reduce((E,M)=>E+M.x,0)/d.points.length,w=d.points.reduce((E,M)=>E+M.y,0)/d.points.length,C=i.width/i.height,S=d.area/(i.width*i.height),P=4*Math.PI*d.area/(h*h),R=h*h/d.area,O=L({area:d.area,solidity:1,circularity:P,extent:S,aspectRatio:C,compactness:R,perimeter:h});p.push({x:i.x,y:i.y,width:i.width,height:i.height,area:d.area,confidence:O,circularity:P,solidity:1,extent:S,aspectRatio:C,compactness:R,perimeter:h,contourPoints:d.points.length,centerX:v,centerY:w,huMoments:[],isConvex:!0,boundingCircleRadius:Math.max(i.width,i.height)/2}),u++}}return p}catch(e){throw new Error(`Error en detección nativa: ${e instanceof Error?e.message:"Error desconocido"}`)}}function L(n){const{area:s,solidity:t,circularity:e,extent:c,aspectRatio:o,compactness:a,perimeter:f}=n,y=Math.min(s/1e3,1),p=t,u=Math.min(e,1),r=c,m=o>.5&&o<2?1:.5,l=Math.max(0,1-a/100);return y*.2+p*.2+u*.2+r*.15+m*.15+l*.1}function N(n,s,t,e,c,o,a){const f=[],y=[[t,e]];for(;y.length>0;){const[p,u]=y.pop(),r=u*c+p;p<0||p>=c||u<0||u>=o||n[r]!==255||s[r]!==0||(s[r]=a,f.push({x:p,y:u}),y.push([p+1,u],[p-1,u],[p,u+1],[p,u-1]))}return{points:f,area:f.length}}function W(n){if(n.length===0)return{x:0,y:0,width:0,height:0};const s=Math.min(...n.map(o=>o.x)),t=Math.max(...n.map(o=>o.x)),e=Math.min(...n.map(o=>o.y)),c=Math.max(...n.map(o=>o.y));return{x:s,y:e,width:t-s,height:c-e}}function B(n){if(n.length<2)return 0;let s=0;for(let t=0;t<n.length;t++){const e=n[t],c=n[(t+1)%n.length],o=c.x-e.x,a=c.y-e.y;s+=Math.sqrt(o*o+a*a)}return s}self.onmessage=async n=>{const{type:s,taskId:t}=n.data;try{switch(s){case"INIT":g.isInitialized?x(t,"completed","Worker ya estaba inicializado"):(await X(),g.isInitialized=!0,x(t,"completed","Worker inicializado correctamente"));break;case"DETECT":{const{imageData:e,minArea:c}=n.data;if(g.isProcessing){A(t,"Worker ya está procesando otra tarea");return}g.isProcessing=!0;try{const o=await _(e,c,t);U(t,o),g.totalProcessed++;const a=g.averageProcessingTime*(g.totalProcessed-1)+o.processingTime;g.averageProcessingTime=a/g.totalProcessed}catch(o){A(t,o instanceof Error?o.message:"Error desconocido")}finally{g.isProcessing=!1}break}case"STATUS":x(t,"completed",`Worker status: ${g.isOpenCVReady?"OpenCV listo":"Modo nativo"}`);break;default:A(t,`Tipo de mensaje no soportado: ${s}`)}}catch(e){A(t,e instanceof Error?e.message:"Error crítico en el worker")}};
